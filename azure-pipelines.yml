trigger:
- master

pr:
- master

jobs:
- job: macOS
  pool:
    vmImage: 'macOS-10.14'
    
  steps:
  - script: |
      git submodule update --init --recursive
    displayName: 'Checkout dependencies'
    
  - script: |
      cmake --version
    displayName: 'CMake version'

  - script: |
      sudo xcode-select --switch /Applications/Xcode_11.3.1.app/Contents/Developer
    displayName: 'Select XCode 11.3.1'
    
  - script: |
      mkdir buildmacOS
      cd buildmacOS
      cmake .. -GXcode
    displayName: 'Generate macOS solution'
      
  - task: Xcode@5
    inputs:
      xcWorkspacePath: 'buildmacOS/BabylonNative.xcodeproj'
      scheme: 'Playground'
      sdk: 'macosx'
      useXcpretty: false
    displayName: 'Build macOS'
    
- job: iOS
  pool:
    vmImage: 'macOS-10.14'
    
  steps:
  - script: |
      git submodule update --init --recursive
    displayName: 'Checkout dependencies'
      
  - script: |
      cmake --version
    displayName: 'CMake version'

  - script: |
      sudo xcode-select --switch /Applications/Xcode_11.3.1.app/Contents/Developer
    displayName: 'Select XCode 11.3.1'

  - script: |
      mkdir buildiOS
      cd buildiOS
      cmake .. -G Xcode -DCMAKE_TOOLCHAIN_FILE=../Dependencies/ios-cmake/ios.toolchain.cmake -DPLATFORM=OS64COMBINED -DENABLE_ARC=0 -DDEPLOYMENT_TARGET=12 -DENABLE_GLSLANG_BINARIES=OFF -DSPIRV_CROSS_CLI=OFF
    displayName: 'Generate iOS solution'

  - task: Xcode@5
    inputs:
      xcWorkspacePath: 'buildiOS/BabylonNative.xcodeproj'
      scheme: 'Playground'
      sdk: 'iphoneos'
      useXcpretty: false
    displayName: 'Build iOS'
    
- job: win32_x64
  timeoutInMinutes: 20
  pool:
    vmImage: 'windows-latest'

  steps:
  - script: |
      git submodule update --init --recursive
    displayName: 'Checkout dependencies'

  - script: |
      mkdir buildWin32_x64
      cd buildWin32_x64
      cmake -G "Visual Studio 16 2019" -A x64 ..
    displayName: 'Generate Win32_x64 solution'
    
  - task: MSBuild@1
    inputs:
      solution: 'buildWin32_x64/BabylonNative.sln'
      maximumCpuCount: true
      configuration: 'Release'
    displayName: 'Build WIN32_x64'
  - script: |
      cd buildWin32_x64\Apps\ValidationTests
      mkdir Results
      mkdir Errors
      cd Release
      ValidationTests
    displayName: 'Validation Tests'
  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'Win32_x64 Rendered Pictures'
      pathtoPublish: 'buildWin32_x64/Apps/ValidationTests/Results'
    displayName: 'Publish Tests Win32_x64 Results'
    
- job: win32_x86
  timeoutInMinutes: 20 
  pool:
    vmImage: 'windows-latest'

  steps:
  - script: |
      git submodule update --init --recursive
    displayName: 'Checkout dependencies'

  - script: |
      mkdir buildWin32_x86
      cd buildWin32_x86
      cmake .. -G "Visual Studio 16 2019" -A Win32
    displayName: 'Generate Win32_x86 solution'
    
  - task: MSBuild@1
    inputs:
      solution: 'buildWin32_x86/BabylonNative.sln'
      maximumCpuCount: true
      configuration: 'Release'
    displayName: 'Build WIN32_x86'
  - script: |
      cd buildWin32_x86\Apps\ValidationTests
      mkdir Results
      mkdir Errors
      cd Release
      ValidationTests
    displayName: 'Validation Tests'
  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'Win32_x86 Rendered Pictures'
      pathtoPublish: 'buildWin32_x86/Apps/ValidationTests/Results'
    displayName: 'Publish Tests Win32_x86 Results'
    
- job: uwp_x64    
  pool:
    vmImage: 'windows-latest'  
    
  steps:
  - script: |
      git submodule update --init --recursive
    displayName: 'Checkout dependencies'
    
  - script: |
      mkdir buildUWP_x64
      cd buildUWP_x64
      cmake .. -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -A x64
    displayName: 'Generate UWP_x64 solution'
  
  - task: VSBuild@1
    inputs:
      solution: 'buildUWP_x64/BabylonNative.sln'
      maximumCpuCount: true
      configuration: 'Release'
      msbuildArgs: '/p:AppxPackageSigningEnabled=false'
    displayName: 'Build UWP_x64'

- job: uwp_arm64    
  pool:
    vmImage: 'windows-latest'  
    
  steps:
  - script: |
      git submodule update --init --recursive
    displayName: 'Checkout dependencies'
    
  - script: |
      mkdir buildUWP_arm64
      cd buildUWP_arm64
      cmake .. -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -A arm64
    displayName: 'Generate UWP_arm64 solution'
  
  - task: VSBuild@1
    inputs:
      solution: 'buildUWP_arm64/BabylonNative.sln'
      maximumCpuCount: true
      configuration: 'Release'
      msbuildArgs: '/p:AppxPackageSigningEnabled=false'
    displayName: 'Build UWP_arm64'

- job: uwp_x86
  pool:
    vmImage: 'windows-latest'  

  steps:
  - script: |
      git submodule update --init --recursive
    displayName: 'Checkout dependencies'

  - script: |
      mkdir buildUWP_x86
      cd buildUWP_x86
      cmake .. -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -G "Visual Studio 16 2019" -A Win32
    displayName: 'Generate UWP_x86 solution'

  - task: VSBuild@1
    inputs:
      solution: 'buildUWP_x86/BabylonNative.sln'
      maximumCpuCount: true
      configuration: 'Release'
      msbuildArgs: '/p:AppxPackageSigningEnabled=false'
    displayName: 'Build UWP_x86'

- job: androidV8
  timeoutInMinutes: 25
  pool:
    vmImage: 'macOS-10.14'
    
  steps:
  - script: |
      git submodule update --init --recursive
    displayName: 'Checkout dependencies'
  - script: |
      set -eu
      curl -Ls https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-mac.zip -o ninja-mac.zip
      unzip ninja-mac.zip
      sudo cp -v ninja /usr/local/bin/
    displayName: 'Install Ninja'
  - script: |
      cd Apps/Playground/Android
      npm install
    displayName: 'Install JS engine NPMs Playground'
  - script: |
      cd Apps/ValidationTests/Android
      npm install
    displayName: 'Install JS engine NPMs ValidationTests'
#  - task: Gradle@2
#    inputs:
#        workingDirectory: 'Apps/Playground/Android'
#        gradleWrapperFile: 'Apps/Playground/Android/gradlew'
#        gradleOptions: '-Xmx1536m'
#        options: '-PJSEngine=v8android'
#        publishJUnitResults: false
#        tasks: 'assembleDebug'
#    displayName: 'Build androidV8 Playground'
  - task: Gradle@2
    inputs:
        workingDirectory: 'Apps/ValidationTests/Android'
        gradleWrapperFile: 'Apps/ValidationTests/Android/gradlew'
        gradleOptions: '-Xmx1536m'
        options: '-PJSEngine=v8android'
        publishJUnitResults: false
        tasks: 'assembleDebug'
    displayName: 'Build androidV8 Validation Tests'
  - script: |
      echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;google_apis;x86'
    displayName: 'Install Android image'
  - script: |
      $ANDROID_HOME/emulator/emulator -list-avds
      echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n test_android_emulator -k 'system-images;android-27;google_apis;x86' --force
      $ANDROID_HOME/emulator/emulator -list-avds
    displayName: 'Create AVD'
  - script: |
      nohup $ANDROID_HOME/emulator/emulator -avd test_android_emulator -no-snapshot -skin 600x400 > /dev/null 2>&1 & $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
    displayName: 'Start Android emulator'
  - script: |
      adb install -t -g Apps/ValidationTests/Android/app/build/outputs/apk/debug/app-debug.apk
      adb shell am start -n com.android.babylonnative.validationtests/com.android.babylonnative.validationtests.ValidationTestsActivity
      sleep 150
#      while [[ $(adb shell pidof com.android.babylonnative.validationtests) ]]; do sleep 1; done;
      adb logcat -t 5000
      mkdir Captures
      adb exec-out run-as com.android.babylonnative.validationtests tar c cache/ > Captures/cache.tar
    displayName: 'Install and run APK'
  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'androidV8 Rendered Pictures'
      pathtoPublish: 'Captures'
    displayName: 'Publish Tests androidV8 Results'

- job: androidJSC
  pool:
    vmImage: 'macOS-10.14'
    
  steps:
  - script: |
      git submodule update --init --recursive
    displayName: 'Checkout dependencies'
  - script: |
      set -eu
      curl -Ls https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-mac.zip -o ninja-mac.zip
      unzip ninja-mac.zip
      sudo cp -v ninja /usr/local/bin/
    displayName: 'Install Ninja'
  - script: |
      cd Apps/Playground/Android
      npm install
    displayName: 'Install JS engine NPMs'    
  - task: Gradle@2
    inputs:
        workingDirectory: 'Apps/Playground/Android'
        gradleWrapperFile: 'Apps/Playground/Android/gradlew'
        gradleOptions: '-Xmx1536m'
        options: '-PJSEngine=jsc'
        publishJUnitResults: false
        tasks: 'assembleDebug'
    displayName: 'Build androidJSC'

- job: Ubuntu
  pool:
    vmImage: 'ubuntu-latest'

  variables:
    CC: clang-8
    CXX: clang++-8

  steps:
  - script: |
      git submodule update --init --recursive
    displayName: 'Checkout dependencies'
  - script: |
      sudo apt-get update
      sudo apt-get install libjavascriptcoregtk-4.0-dev libgl1-mesa-dev libcurl4-openssl-dev clang-8 libc++-8-dev libc++abi-8-dev lld-8 ninja-build
    displayName: 'Install packages'
  - script: |
      mkdir build
      cd build
      cmake .. -GNinja -DJSCORE_LIBRARY=/usr/lib/x86_64-linux-gnu/libjavascriptcoregtk-4.0.so
      ninja
    displayName: 'Build X11'

