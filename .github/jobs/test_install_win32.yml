parameters:
- name: name
  type: string
- name: vmImage
  type: string
- name: platform
  type: string
- name: napiType
  type: string
  default: direct
  values:
  - direct
  - jsi
  - V8
- name: graphics_api
  type: string
  default: D3D11
  
jobs:
  - job: ${{ parameters.name }}
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    timeoutInMinutes: 20
    pool:
      vmImage: ${{ parameters.vmImage }}
    variables:
      ${{ if eq(parameters.napiType, 'jsi') }}:
        napiSuffix: '_JSI'
        jsEngineDefine: '-DNAPI_JAVASCRIPT_ENGINE=JSI'
      ${{ elseif eq(parameters.napiType, 'V8') }}:
        napiSuffix: '_V8'
        jsEngineDefine: '-DNAPI_JAVASCRIPT_ENGINE=V8'
      ${{ else }}:
        napiSuffix: ''
        jsEngineDefine: ''
      solutionName: 'Win32_${{ parameters.platform }}${{variables.napiSuffix}}'

    steps:
      - template: cmake.yml
        parameters:
          vmImage: ${{ parameters.vmImage }}

      # BGFX_CONFIG_MAX_FRAME_BUFFERS is set so enough Framebuffers are available before V8 starts disposing unused ones
      - script: |
          # BGFX_CONFIG_MAX_FRAME_BUFFERS is set so enough Framebuffers are available before V8 starts disposing unused ones
          cmake -B build${{ variables.solutionName }} -A ${{ parameters.platform }} ${{ variables.jsEngineDefine }} -D BX_CONFIG_DEBUG=ON -D GRAPHICS_API=${{ parameters.graphics_api }} -D CMAKE_UNITY_BUILD=$(UNITY_BUILD) -D BGFX_CONFIG_MAX_FRAME_BUFFERS=256 -D BABYLON_DEBUG_TRACE=ON
        displayName: 'Generate ${{ variables.solutionName }} solution'
    
      - task: MSBuild@1
        inputs:
          solution: 'build${{ variables.solutionName }}/BabylonNative.sln'
          maximumCpuCount: true
          configuration: 'RelWithDebInfo'
        displayName: 'Build ${{ variables.solutionName }}'
    
      - script: |
          cmake --build build${{ variables.solutionName }} --target INSTALL --config RelWithDebInfo
          cd Install/Test
          cmake . -DBINARY_DIR=../../build${{ variables.solutionName }} ${{ variables.jsEngineDefine }}
          cmake --build . --config RelWithDebInfo
        displayName: 'Install'