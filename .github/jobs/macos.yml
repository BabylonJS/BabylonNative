parameters:
  name: ''
  vmImage: ''
  xcodeVersion: ''

jobs:
  - job: ${{ parameters.name }}
    timeoutInMinutes: 30
    pool:
      vmImage: ${{ parameters.vmImage }}
  
    steps:
    - template: cmake.yml
      parameters:
        vmImage: ${{ parameters.vmImage }}

    - script: |
        sudo xcode-select --switch /Applications/Xcode_${{ parameters.xcodeVersion }}.app/Contents/Developer
      displayName: 'Select XCode ${{ parameters.xcodeVersion }}'

    - script: |
        cmake -G Xcode -B buildmacOS -D CMAKE_UNITY_BUILD=$(UNITY_BUILD) -D BABYLON_DEBUG_TRACE=ON 
      displayName: 'Generate macOS solution'

    - script: |
        xcodebuild -list -project buildmacOS/BabylonNative.xcodeproj
      displayName: 'List available project schemes'

    - task: Xcode@5
      inputs:
        xcWorkspacePath: 'buildmacOS/BabylonNative.xcodeproj'
        scheme: 'install'
        sdk: 'macosx'
        useXcpretty: false
        configuration: Release
      displayName: 'Build Installation content macOS'

    - task: Xcode@5
      inputs:
        xcWorkspacePath: 'buildmacOS/BabylonNative.xcodeproj'
        scheme: 'Playground'
        sdk: 'macosx'
        useXcpretty: false
        configuration: RelWithDebInfo
      displayName: 'Build Playground macOS'

    - task: Xcode@5
      inputs:
        xcWorkspacePath: 'buildmacOS/BabylonNative.xcodeproj'
        scheme: 'UnitTests'
        sdk: 'macosx'
        useXcpretty: false
        configuration: RelWithDebInfo
      displayName: 'Build UnitTests macOS'

    - script: |
        cmake --install buildmacOS --prefix="./install"
      displayName: 'Install'

    - script: |
        cd buildmacOS/Apps/UnitTests/RelWithDebInfo
        ./UnitTests
      displayName: 'Run UnitTests macOS'