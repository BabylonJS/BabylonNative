parameters:
  name: ''
  vmImage: ''
  xCodeVersion: ''
  macOSCodename: ''
  
jobs:
  - job: ${{ parameters.name }}
    timeoutInMinutes: 30
    pool:
      vmImage: ${{ parameters.vmImage }}
  
    steps:
    - script: |
        git submodule update --init --recursive
      displayName: 'Checkout dependencies'

    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: 'Apps'
      displayName: 'Install Babylon.js NPM packages'

    - template: cmake.yml
      parameters:
        vmImage: ${{ parameters.vmImage }}

    - script: |
        sudo xcode-select --switch /Applications/Xcode_${{ parameters.xCodeVersion }}.app/Contents/Developer
      displayName: 'Select XCode ${{ parameters.xCodeVersion }}'

    - script: |
        mkdir buildmacOS
        cd buildmacOS
        cmake .. -GXcode
      displayName: 'Generate macOS solution'

    - task: Xcode@5
      inputs:
        xcWorkspacePath: 'buildmacOS/BabylonNative.xcodeproj'
        scheme: 'Playground'
        sdk: 'macosx'
        useXcpretty: false
        configuration: RelWithDebInfo
      displayName: 'Build Playground macOS'

    - task: Xcode@5
      inputs:
        xcWorkspacePath: 'buildmacOS/BabylonNative.xcodeproj'
        scheme: 'ValidationTests'
        sdk: 'macosx'
        useXcpretty: false
        configuration: RelWithDebInfo
      displayName: 'Build ValidationTests macOS'

    - task: Xcode@5
      inputs:
        xcWorkspacePath: 'buildmacOS/BabylonNative.xcodeproj'
        scheme: 'UnitTests'
        sdk: 'macosx'
        useXcpretty: false
        configuration: RelWithDebInfo
      displayName: 'Build UnitTests macOS'

    - script: |
        cd buildmacOS/Apps/UnitTests/RelWithDebInfo
        ./UnitTests
      displayName: 'Run UnitTests MacOS'