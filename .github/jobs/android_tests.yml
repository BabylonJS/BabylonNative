parameters:
  name: ''
  vmImage: ''
  JSEngine: ''
  macOSCodename: ''

jobs:
  - job: ${{ parameters.name }}
    timeoutInMinutes: 45
    pool:
      vmImage: ${{ parameters.vmImage }}

    steps:
    - template: cmake.yml
      parameters:
        vmImage: ${{ parameters.vmImage }}

    - script: |
        set -euo pipefail
        ANDROID_SDK_ROOT="${ANDROID_SDK_ROOT:-${ANDROID_HOME:-}}"
        if [ -z "$ANDROID_SDK_ROOT" ]; then
          echo "ANDROID_SDK_ROOT or ANDROID_HOME must be set" >&2
          exit 1
        fi

        if [ -x "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
          SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
        elif [ -x "$ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager" ]; then
          SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager"
        elif [ -x "$ANDROID_SDK_ROOT/tools/bin/sdkmanager" ]; then
          SDKMANAGER="$ANDROID_SDK_ROOT/tools/bin/sdkmanager"
        else
          echo "Unable to locate sdkmanager under $ANDROID_SDK_ROOT" >&2
          exit 1
        fi

        echo "Installing Android NDK version $(NDK_VERSION) using $SDKMANAGER"
        yes | "$SDKMANAGER" --licenses
        yes | "$SDKMANAGER" --install "ndk;$(NDK_VERSION)"
      displayName: 'Install Android NDK $(NDK_VERSION)'

    - script: |
        echo Install Android image
        echo 'y' | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;default;x86_64'
        echo 'y' | $ANDROID_HOME/tools/bin/sdkmanager --licenses
        echo Create AVD
        $ANDROID_HOME/tools/bin/avdmanager create avd -n Pixel_API_27 -d pixel -k 'system-images;android-27;default;x86_64'
      displayName: 'Install Android Emulator'
    - script: |
        echo Start emulator
        nohup $ANDROID_HOME/emulator/emulator -avd Pixel_API_27 -gpu host -no-window 2>&1 &
        echo Wait for emulator
        $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do echo '.'; sleep 1; done'
        $ANDROID_HOME/platform-tools/adb devices
      displayName: 'Start Android Emulator'

    - task: Gradle@3
      inputs:
        gradleWrapperFile: 'Apps/UnitTests/Android/gradlew'
        workingDirectory: 'Apps/UnitTests/Android'
        options: '-PabiFilters=x86_64 -PjsEngine=${{parameters.jsEngine}}'
        tasks: 'connectedAndroidTest'
        jdkVersionOption: 1.11
      displayName: 'Run Connected Android Test'

    - script: |
        export results=$(find ./app/build/outputs/androidTest-results -name "*.txt")
        echo cat "$results"
        cat "$results"
      workingDirectory: 'Apps/UnitTests/Android'
      condition: succeededOrFailed()
      displayName: 'Dump logcat from Test Results'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'Apps/UnitTests/Android/app/build/outputs/androidTest-results/connected'
        artifactName: 'AndroidTestResults_${{parameters.jsEngine}}'
      condition: succeededOrFailed()
      displayName: 'Publish Test Results'
