function(target_link_to_dependencies)
    set(target ${ARGV0})
    math(EXPR lastIdx ${ARGC}-1)
    set(scope PUBLIC)
    foreach(idx RANGE 1 ${lastIdx})
        set(arg "${ARGV${idx}}")
        if(arg STREQUAL "PUBLIC")
            set(scope PUBLIC)
        elseif(arg STREQUAL "PRIVATE")
            set(scope PRIVATE)
        elseif(arg STREQUAL "INTERFACE")
            set(scope INTERFACE)
        elseif(TARGET ${arg})
            function(on_linked_as_dependency target)
            endfunction()

            get_target_property(type ${arg} TYPE)
            if(NOT type STREQUAL "INTERFACE_LIBRARY")
                get_target_property(cmakeFileList ${arg} ON_LINKED_AS_DEPENDENCY_CMAKE_FILES)
                if(NOT cmakeFileList STREQUAL "cmakeFileList-NOTFOUND")
                    foreach(cmakeFile ${cmakeFileList})
                        include(${cmakeFile} REQUIRED)
                    endforeach()
                endif()
            endif()

            target_link_libraries(${target} ${scope} ${arg})
            on_linked_as_dependency(${target})
        else()
            target_link_libraries(${target} ${scope} ${arg})
        endif()
    endforeach()
endfunction()

function(add_on_linked_as_dependency_cmake_file target cmakeFile)
    get_target_property(cmakeFileList ${target} ON_LINKED_AS_DEPENDENCY_CMAKE_FILES)
    if(cmakeFileList STREQUAL "cmakeFileList-NOTFOUND")
        set(cmakeFileList ${cmakeFile})
    else()
        list(APPEND cmakeFileList ${cmakeFile})
    endif()
    set_target_properties(${target} PROPERTIES ON_LINKED_AS_DEPENDENCY_CMAKE_FILES "${cmakeFileList}")
endfunction()

function(propagate_on_linked_as_dependency_cmake_file library target)
    get_target_property(type ${target} TYPE)
            
    if(NOT ${type} STREQUAL "INTERFACE_LIBRARY")
        get_target_property(onLinkedAsDependencyHandler ${library} ON_LINKED_AS_DEPENDENCY_CMAKE_FILES)
        get_target_property(cmakeFileList ${target} ON_LINKED_AS_DEPENDENCY_CMAKE_FILES)
        if(cmakeFileList STREQUAL "cmakeFileList-NOTFOUND")
            set(cmakeFileList ${onLinkedAsDependencyHandler})
        else()
            list(FIND cmakeFileList ${onLinkedAsDependencyHandler} idx)
            if(${idx} EQUAL -1)
                list(APPEND cmakeFileList ${onLinkedAsDependencyHandler})
            endif()
        endif()
        set_target_properties(${target} PROPERTIES ON_LINKED_AS_DEPENDENCY_CMAKE_FILES "${cmakeFileList}")
    endif()
endfunction()
